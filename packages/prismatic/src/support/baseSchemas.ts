/**
 * Copyright (c) DragonSpark 2024
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this repository.
 *
 * May your code be mighty and your dragons ever fierce.
 */

export type ColorShade = {
  number: number;
  hexcode: string;
};

export type TransformShade = ColorShade & {
  delta: number;
  lightnessDiff: number;
};

export type ColorSchema = {
  name: string;
  id: string;
  shades: ColorShade[];
};

export type TransformSchema = Omit<ColorSchema, 'shades'> & {
  closestShade: TransformShade;
  closestShadeLightness: TransformShade;
  shades: TransformShade[];
};

const shadeValues: Record<string, number[][]> = {
  Slate: [
    [50, 16317180],
    [100, 15857145],
    [200, 14870768],
    [300, 13358561],
    [400, 9741240],
    [500, 6583435],
    [600, 4674921],
    [700, 3359061],
    [800, 1976635],
    [900, 988970],
    [950, 132631]
  ],
  Gray: [
    [50, 16382715],
    [100, 15987958],
    [200, 15067115],
    [300, 13751771],
    [400, 10265519],
    [500, 7041664],
    [600, 4937059],
    [700, 3621201],
    [800, 2042167],
    [900, 1120295],
    [950, 198418]
  ],
  Zinc: [
    [50, 16448250],
    [100, 16053493],
    [200, 15000807],
    [300, 13948120],
    [400, 10592682],
    [500, 7434618],
    [600, 5395035],
    [700, 4144966],
    [800, 2565930],
    [900, 1579035],
    [950, 592139]
  ],
  Neutral: [
    [50, 16448250],
    [100, 16119285],
    [200, 15066597],
    [300, 13948116],
    [400, 10724259],
    [500, 7566195],
    [600, 5395026],
    [700, 4210752],
    [800, 2500134],
    [900, 1513239],
    [950, 657930]
  ],
  Stone: [
    [50, 16448249],
    [100, 16119284],
    [200, 15197668],
    [300, 14078929],
    [400, 11051678],
    [500, 7893356],
    [600, 5722958],
    [700, 4472892],
    [800, 2696484],
    [900, 1841431],
    [950, 789001]
  ],
  Red: [
    [50, 16708338],
    [100, 16704226],
    [200, 16698058],
    [300, 16557477],
    [400, 16281969],
    [500, 15680580],
    [600, 14427686],
    [700, 12131356],
    [800, 10033947],
    [900, 8330525],
    [950, 4524554]
  ],
  Orange: [
    [50, 16775149],
    [100, 16772565],
    [200, 16701354],
    [300, 16628340],
    [400, 16486972],
    [500, 16347926],
    [600, 15357964],
    [700, 12730636],
    [800, 10105874],
    [900, 8138002],
    [950, 4396039]
  ],
  Amber: [
    [50, 16776171],
    [100, 16708551],
    [200, 16639626],
    [300, 16569165],
    [400, 16498468],
    [500, 16096779],
    [600, 14251782],
    [700, 11817737],
    [800, 9584654],
    [900, 7877903],
    [950, 4528643]
  ],
  Yellow: [
    [50, 16710888],
    [100, 16710083],
    [200, 16707722],
    [300, 16638023],
    [400, 16436245],
    [500, 15381256],
    [600, 13273604],
    [700, 10576391],
    [800, 8736014],
    [900, 7421714],
    [950, 4333574]
  ],
  Lime: [
    [50, 16252647],
    [100, 15531211],
    [200, 14285213],
    [300, 12513892],
    [400, 10741301],
    [500, 8702998],
    [600, 6660877],
    [700, 5078031],
    [800, 4153874],
    [900, 3560212],
    [950, 1715717]
  ],
  Green: [
    [50, 15793652],
    [100, 14482663],
    [200, 12318672],
    [300, 8843180],
    [400, 4906624],
    [500, 2278750],
    [600, 1483594],
    [700, 1409085],
    [800, 1467700],
    [900, 1332013],
    [950, 339478]
  ],
  Emerald: [
    [50, 15531509],
    [100, 13761253],
    [200, 11006928],
    [300, 7268279],
    [400, 3462041],
    [500, 1096065],
    [600, 366185],
    [700, 292951],
    [800, 417606],
    [900, 413243],
    [950, 142370]
  ],
  Teal: [
    [50, 15793658],
    [100, 13433841],
    [200, 10090212],
    [300, 6220500],
    [400, 3003583],
    [500, 1357990],
    [600, 889992],
    [700, 1013358],
    [800, 1138265],
    [900, 1265226],
    [950, 274222]
  ],
  Cyan: [
    [50, 15531775],
    [100, 13630206],
    [200, 10875900],
    [300, 6809849],
    [400, 2282478],
    [500, 440020],
    [600, 561586],
    [700, 947344],
    [800, 1400437],
    [900, 1461859],
    [950, 537412]
  ],
  Sky: [
    [50, 15792639],
    [100, 14742270],
    [200, 12248829],
    [300, 8246268],
    [400, 3718648],
    [500, 959977],
    [600, 165063],
    [700, 223649],
    [800, 481669],
    [900, 805486],
    [950, 536393]
  ],
  Blue: [
    [50, 15726335],
    [100, 14412542],
    [200, 12573694],
    [300, 9684477],
    [400, 6333946],
    [500, 3900150],
    [600, 2450411],
    [700, 1920728],
    [800, 1982639],
    [900, 1981066],
    [950, 1516884]
  ],
  Indigo: [
    [50, 15659775],
    [100, 14739455],
    [200, 13095678],
    [300, 10859772],
    [400, 8490232],
    [500, 6514417],
    [600, 5195493],
    [700, 4405450],
    [800, 3616931],
    [900, 3223169],
    [950, 1973067]
  ],
  Violet: [
    [50, 16118783],
    [100, 15591934],
    [200, 14538494],
    [300, 12891645],
    [400, 10980346],
    [500, 9133302],
    [600, 8141549],
    [700, 7153881],
    [800, 5972406],
    [900, 4988309],
    [950, 3018853]
  ],
  Purple: [
    [50, 16446975],
    [100, 15984895],
    [200, 15324671],
    [300, 14202110],
    [400, 12616956],
    [500, 11032055],
    [600, 9647082],
    [700, 8266446],
    [800, 7020968],
    [900, 5774471],
    [950, 3868516]
  ],
  Fuchsia: [
    [50, 16643327],
    [100, 16443647],
    [200, 16109822],
    [300, 15772668],
    [400, 15235577],
    [500, 14239471],
    [600, 12592851],
    [700, 10624175],
    [800, 8788367],
    [900, 7346805],
    [950, 4850766]
  ],
  Pink: [
    [50, 16642808],
    [100, 16574451],
    [200, 16502760],
    [300, 16361684],
    [400, 16020150],
    [500, 15485081],
    [600, 14362487],
    [700, 12458077],
    [800, 10295117],
    [900, 8591427],
    [950, 5244708]
  ],
  Rose: [
    [50, 16773618],
    [100, 16770278],
    [200, 16698835],
    [300, 16622767],
    [400, 16478597],
    [500, 16007006],
    [600, 14753096],
    [700, 12456508],
    [800, 10424889],
    [900, 8917815],
    [950, 4982041]
  ]
};

/**
 * Generate a color schema object based on the provided name and shades.
 *
 * @param {string} name - The name of the color schema.
 * @param {number[][]} shades - An array of shades, where each shade is represented by [number, value].
 * @returns {ColorSchema} The generated color schema object.
 */
const generateColorSchema = (
  name: string,
  shades: number[][]
): ColorSchema => ({
  name,
  id: name.toLowerCase(),
  shades: shades.map(([number, value]) => ({
    number,
    hexcode: `#${value.toString(16).padStart(6, '0')}`
  }))
});

/**
 * Represents all available reference color schemas.
 *
 * @type {ColorSchema[]}
 * @description The `referenceSchemas` array is generated by mapping the entries of the `shadeValues` object. The base shade values
 * are obtained from TailwindCSS's base colors.
 * @see
 */
export const referenceSchemas: ColorSchema[] = Object.entries(shadeValues).map(
  ([name, shades]) => generateColorSchema(name, shades)
);
